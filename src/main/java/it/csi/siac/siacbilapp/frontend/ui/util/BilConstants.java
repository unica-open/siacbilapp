/*
*SPDX-FileCopyrightText: Copyright 2020 | CSI Piemonte
*SPDX-License-Identifier: EUPL-1.2
*/
package it.csi.siac.siacbilapp.frontend.ui.util;

import it.csi.siac.siaccorser.model.TipologiaClassificatore;
import it.csi.siac.siaccorser.model.VariabileProcesso;
import it.csi.siac.siacfin2ser.model.TipoOperazionePCC;

/**
 * Enumeration per costanti applicative.
 * 
 * @author rmontuori, Alessandro Marchino
 *
 */
@SuppressWarnings("javadoc")
public enum BilConstants {
	
	/** Codice dell'applicazione */
	APPLICATION_CODE("bilApplication"),
	
	/* Capitolo di entrata */
	CODICE_CAPITOLO_ENTRATA("CAP-E"),
	CODICE_CAPITOLO_ENTRATA_GESTIONE("CAP-EG"),
	CODICE_CAPITOLO_ENTRATA_PREVISIONE("CAP-EP"),
	
	/* Capitolo di Uscita */
	CODICE_CAPITOLO_USCITA("CAP-U"),
	CODICE_CAPITOLO_USCITA_GESTIONE("CAP-UG"),
	CODICE_CAPITOLO_USCITA_PREVISIONE("CAP-UP"),
	
	/* Articolo di entrata */
	CODICE_ARTICOLO_ENTRATA("ART-E"),
	//CODICE_ARTICOLO_ENTRATA_GESTIONE("ART-EG"),
	CODICE_ARTICOLO_ENTRATA_PREVISIONE("ART-EP"),
	
	/* Articolo di uscita */
	CODICE_ARTICOLO_USCITA("CAP-U"),
	//CODICE_ARTICOLO_USCITA_GESTIONE("ART-UG"),
	CODICE_ARTICOLO_USCITA_PREVISIONE("ART-UP"),

	/* UEB di entrata */
	CODICE_UNITA_ELEMENTARE_BILANCIO_ENTRATA("UEB-E"),
	//CODICE_UNITA_ELEMENTARE_BILANCIO_ENTRATA_GESTIONE("UEB-EG"),
	CODICE_UNITA_ELEMENTARE_BILANCIO_ENTRATA_PREVISIONE("UEB-EP"),
	
	/* UEB di uscita */
	CODICE_UNITA_ELEMENTARE_BILANCIO_USCITA("UEB-U"),
	//CODICE_UNITA_ELEMENTARE_BILANCIO_USCITA_GESTIONE("UEB-UG"),
	CODICE_UNITA_ELEMENTARE_BILANCIO_USCITA_PREVISIONE("UEB-EP"),
	
	/* Classificatori in gerarchia */
	CODICE_MISSIONE(TipologiaClassificatore.MISSIONE.toString()),
	CODICE_PROGRAMMA(TipologiaClassificatore.PROGRAMMA.toString()),
	CODICE_TITOLO_SPESA(TipologiaClassificatore.TITOLO_SPESA.toString()),
	CODICE_TITOLO_ENTRATA(TipologiaClassificatore.TITOLO_ENTRATA.toString()),
	CODICE_MACROAGGREGATO(TipologiaClassificatore.MACROAGGREGATO.toString()),
	CODICE_TIPOLOGIA(TipologiaClassificatore.TIPOLOGIA.toString()),
	CODICE_CATEGORIA(TipologiaClassificatore.CATEGORIA.toString()),
	
	/* Classificatori generici */
	CODICE_TIPO_FINANZIAMENTO(TipologiaClassificatore.TIPO_FINANZIAMENTO.toString()),
	CODICE_TIPO_FONDO(TipologiaClassificatore.TIPO_FONDO.toString()),
	CODICE_CLASSIFICATORE1(TipologiaClassificatore.CLASSIFICATORE_1.toString()),
	CODICE_CLASSIFICATORE2(TipologiaClassificatore.CLASSIFICATORE_2.toString()),
	CODICE_CLASSIFICATORE3(TipologiaClassificatore.CLASSIFICATORE_3.toString()),
	CODICE_CLASSIFICATORE4(TipologiaClassificatore.CLASSIFICATORE_4.toString()),
	CODICE_CLASSIFICATORE5(TipologiaClassificatore.CLASSIFICATORE_5.toString()),
	CODICE_CLASSIFICATORE6(TipologiaClassificatore.CLASSIFICATORE_6.toString()),
	CODICE_CLASSIFICATORE7(TipologiaClassificatore.CLASSIFICATORE_7.toString()),
	CODICE_CLASSIFICATORE8(TipologiaClassificatore.CLASSIFICATORE_8.toString()),
	CODICE_CLASSIFICATORE9(TipologiaClassificatore.CLASSIFICATORE_9.toString()),
	CODICE_CLASSIFICATORE10(TipologiaClassificatore.CLASSIFICATORE_10.toString()),
	CODICE_CLASSIFICATORE31(TipologiaClassificatore.CLASSIFICATORE_31.toString()),
	CODICE_CLASSIFICATORE32(TipologiaClassificatore.CLASSIFICATORE_32.toString()),
	CODICE_CLASSIFICATORE33(TipologiaClassificatore.CLASSIFICATORE_33.toString()),
	CODICE_CLASSIFICATORE34(TipologiaClassificatore.CLASSIFICATORE_34.toString()),
	CODICE_CLASSIFICATORE35(TipologiaClassificatore.CLASSIFICATORE_35.toString()),
	
	CODICE_CLASSIFICATORE36(TipologiaClassificatore.CLASSIFICATORE_36.toString()),
	CODICE_CLASSIFICATORE37(TipologiaClassificatore.CLASSIFICATORE_37.toString()),
	CODICE_CLASSIFICATORE38(TipologiaClassificatore.CLASSIFICATORE_38.toString()),
	CODICE_CLASSIFICATORE39(TipologiaClassificatore.CLASSIFICATORE_39.toString()),
	CODICE_CLASSIFICATORE40(TipologiaClassificatore.CLASSIFICATORE_40.toString()),
	CODICE_CLASSIFICATORE41(TipologiaClassificatore.CLASSIFICATORE_41.toString()),
	CODICE_CLASSIFICATORE42(TipologiaClassificatore.CLASSIFICATORE_42.toString()),
	CODICE_CLASSIFICATORE43(TipologiaClassificatore.CLASSIFICATORE_43.toString()),
	CODICE_CLASSIFICATORE44(TipologiaClassificatore.CLASSIFICATORE_44.toString()),
	CODICE_CLASSIFICATORE45(TipologiaClassificatore.CLASSIFICATORE_45.toString()),
	CODICE_CLASSIFICATORE46(TipologiaClassificatore.CLASSIFICATORE_46.toString()),
	CODICE_CLASSIFICATORE47(TipologiaClassificatore.CLASSIFICATORE_47.toString()),
	CODICE_CLASSIFICATORE48(TipologiaClassificatore.CLASSIFICATORE_48.toString()),
	CODICE_CLASSIFICATORE49(TipologiaClassificatore.CLASSIFICATORE_49.toString()),
	CODICE_CLASSIFICATORE50(TipologiaClassificatore.CLASSIFICATORE_50.toString()),
	
	CODICE_CLASSIFICATORE51(TipologiaClassificatore.CLASSIFICATORE_51.toString()),
	CODICE_CLASSIFICATORE52(TipologiaClassificatore.CLASSIFICATORE_52.toString()),
	CODICE_CLASSIFICATORE53(TipologiaClassificatore.CLASSIFICATORE_53.toString()),
	
	CODICE_CLASSIFICATORE_EP1(TipologiaClassificatore.VALORE_BENE.toString()),
	CODICE_CLASSIFICATORE_EP2(TipologiaClassificatore.MODALITA_AQUISIZIONE_BENE.toString()),
	CODICE_CLASSIFICATORE_EP3(TipologiaClassificatore.TIPO_DOCUMENTO_COLLEGATO.toString()),
	CODICE_CLASSIFICATORE_EP4(TipologiaClassificatore.TIPO_ONERE_FISCALE.toString()),
	CODICE_CLASSIFICATORE_EP5(TipologiaClassificatore.RILEVANTE_IVA.toString()),
	
	/* Famiglie */
	CODICE_CDC(TipologiaClassificatore.CDC.toString()),
	CODICE_CDR(TipologiaClassificatore.CDR.toString()),
	CODICE_TIPO_VINCOLO(TipologiaClassificatore.TPV.toString()),
	CODICE_PIANO_DEI_CONTI(TipologiaClassificatore.PDC.toString()),
	CODICE_PIANO_DEI_CONTI_LIVELLO_1(TipologiaClassificatore.PDC_I.toString()),
	CODICE_PIANO_DEI_CONTI_LIVELLO_2(TipologiaClassificatore.PDC_II.toString()),
	CODICE_PIANO_DEI_CONTI_LIVELLO_3(TipologiaClassificatore.PDC_III.toString()),
	CODICE_PIANO_DEI_CONTI_LIVELLO_4(TipologiaClassificatore.PDC_IV.toString()),
	CODICE_PIANO_DEI_CONTI_LIVELLO_5(TipologiaClassificatore.PDC_V.toString()),
	CODICE_COFOG_DIVISIONE(TipologiaClassificatore.DIVISIONE_COFOG.toString()),
	CODICE_COFOG_GRUPPO(TipologiaClassificatore.GRUPPO_COFOG.toString()),
	CODICE_COFOG_CLASSE(TipologiaClassificatore.CLASSE_COFOG.toString()),
	
	CODICE_SIOPE_ENTRATA(TipologiaClassificatore.SIOPE_ENTRATA.toString()),
	CODICE_SIOPE_ENTRATA_LIVELLO_1(TipologiaClassificatore.SIOPE_ENTRATA_I.toString()),
	CODICE_SIOPE_ENTRATA_LIVELLO_2(TipologiaClassificatore.SIOPE_ENTRATA_II.toString()),
	CODICE_SIOPE_ENTRATA_LIVELLO_3(TipologiaClassificatore.SIOPE_ENTRATA_III.toString()),
	CODICE_SIOPE_SPESA(TipologiaClassificatore.SIOPE_SPESA.toString()),
	CODICE_SIOPE_SPESA_LIVELLO_1(TipologiaClassificatore.SIOPE_SPESA_I.toString()),
	CODICE_SIOPE_SPESA_LIVELLO_2(TipologiaClassificatore.SIOPE_SPESA_II.toString()),
	CODICE_SIOPE_SPESA_LIVELLO_3(TipologiaClassificatore.SIOPE_SPESA_III.toString()),
	
	CODICE_RICORRENTE_ENTRATA(TipologiaClassificatore.RICORRENTE_ENTRATA.toString()),
	CODICE_RICORRENTE_SPESA(TipologiaClassificatore.RICORRENTE_SPESA.toString()),
	CODICE_PERIMETRO_SANITARIO_ENTRATA(TipologiaClassificatore.PERIMETRO_SANITARIO_ENTRATA.toString()),
	CODICE_PERIMETRO_SANITARIO_SPESA(TipologiaClassificatore.PERIMETRO_SANITARIO_SPESA.toString()),
	CODICE_TRANSAZIONE_UNIONE_EUROPEA_ENTRATA(TipologiaClassificatore.TRANSAZIONE_UE_ENTRATA.toString()),
	CODICE_TRANSAZIONE_UNIONE_EUROPEA_SPESA(TipologiaClassificatore.TRANSAZIONE_UE_SPESA.toString()),
	CODICE_POLITICHE_REGIONALI_UNITARIE(TipologiaClassificatore.POLITICHE_REGIONALI_UNITARIE.toString()),
	
	/* Gestioni dell'ente */
	GESTIONE_UEB("GESTIONE_UEB"),
	INTEGRAZIONE_HR("INTEGRAZIONE_HR_ATTIVA"),
	CARICA_MISSIONE_DA_ESTERNO("CARICA_MISSIONE_DA_ESTERNO_ATTIVA"),
	GESTIONE_CONVALIDA_AUTOMATICA("CONVALIDA_AUTOMATICA"),
	CONVALIDA_MANUALE("CONVALIDA_MANUALE"),
	//SIAC-6888
	ABILITAZIONE_INSERIMENTO_ACC_AUTOMATICO("ABILITAZIONE_INSERIMENTO_ACC_AUTOMATICO"),
	
	// CodiceCategoria Capitolo 
	CODICE_CATEGORIA_CAPITOLO_STANDARD("STD"),
	CODICE_CATEGORIA_CAPITOLO_AVANZO_AMMINISTRAZIONE("AAM"),
	CODICE_CATEGORIA_CAPITOLO_FONDO_PLURIENNALE_VINCOLATO("FPV"),
	
	/* Variabili del processo */
	VARIABILE_PROCESSO_SAC_ATTIVITA(VariabileProcesso.NOME_VARIABILE_SAC_ATTIVITA),
	VARIABILE_PROCESSO_VARIABILE_SAC(VariabileProcesso.PREFISSO_VALORE_VARIABILE_SAC),
	VARIABILE_PROCESSO_VARIABILE_ANNO_ESERCIZIO(VariabileProcesso.PREFISSO_VALORE_VARIABILE_ANNO_ESERCIZIO),
	VARIABILE_PROCESSO_ANNO_ESERCIZIO_ATTIVITA(VariabileProcesso.NOME_VARIABILE_ANNO_ESERCIZIO_ATTIVITA),
	VARIABILE_PROCESSO_ANNO_ESERCIZIO(VariabileProcesso.VALORE_NULL_ANNO_ESERCIZIO),
	VARIABILE_PROCESSO_NUMERO_VARIAZIONE("variazioneDiBilancioDem"),
	VARIABILE_PROCESSO_ANNO_DI_ESERCIZIO("annoDiEsercizio"),
	VARIABILE_PROCESSO_EXEC_AZIONE("variazioneDiBilancio_execAzioneRichiestaResponse"),
	VARIABILE_PROCESSO_INVIO_GIUNTA("invioGiunta"),
	VARIABILE_PROCESSO_ANNULLA_VARIAZIONE("annullaVariazione"),
	VARIABILE_PROCESSO_INVIO_CONSIGLIO("invioConsiglio"),
	VARIABILE_PROCESSO_SAC_PROCESSO(VariabileProcesso.NOME_VARIABILE_SAC_PROCESSO),
	VARIABILE_PROCESSO_DESCRIZIONE(VariabileProcesso.NOME_VARIABILE_DESCRIZIONE),
	VARIABILE_PROCESSO_DESCRIZIONE_BREVE(VariabileProcesso.NOME_VARIABILE_DESCRIZIONE_BREVE),
	VARIABILE_PROCESSO_ANNO_ESERCIZIO_PROCESSO(VariabileProcesso.NOME_VARIABILE_ANNO_ESERCIZIO_PROCESSO),
	VARIABILE_PROCESSO_TIPO_VARIAZIONE_BILANCIO("tipoVariazioneBilancio"),
	VARIABILE_PROCESSO_QUADRATURA("quadraturaVariazioneDiBilancio"),
	VARIABILE_PROCESSO_STATO_VARIAZIONE("statoVariazioneDiBilancio"),
	VARIABILE_PROCESSO_ENTE_PROPRIETARIO_PROCESSO("siacEnteProprietarioProcesso"),
	
	// Famiglie tree
	ID_FAMIGLIA_TREE_STRUTTURA_AMMINISTRATIVA_CONTABILE("00005"),
	ID_FAMIGLIA_TREE_PIANO_DEI_CONTI("00008"),
	ID_FAMIGLIA_TREE_TITOLO_MACROAGGREGATO("00002"),
	ID_FAMIGLIA_TREE_SIOPE_SPESA("00017"),
	ID_FAMIGLIA_TREE_SIOPE_ENTRATA("00016"),
	ID_FAMIGLIA_TREE_TITOLO_TIPOLOGIA_CATEGORIA("00003"),
	ID_FAMIGLIA_TREE_COFOG("00009"),
	
	// Atto Amministrativo
	STATO_OPERATIVO_ATTO_AMMINISTRATIVO_DEFINITIVO("DEFINITIVO"),
	
	// tipoAtto
	CODICE_TIPO_ATTO_DELIBERA("01"),
	CODICE_TIPO_ATTO_DETERMINA("02"),
	CODICE_TIPO_ATTO_MOVIMENTO_INTERNO("03"),
	CODICE_TIPO_ATTO_DETERMINA_DI_LIQUIDAZIONE("DTL"),
	CODICE_TIPO_ATTO_DETERMINA_DI_INCASSO("DTS"),
	
	// Note credito
	CODICE_NOTE_CREDITO("NCD"),
	CODICE_NOTE_ACCREDITO("NCV"),
	
	//Note
	CODICE_NOTE("NTE"),
	
	// PreDocumento
	DESCRIZIONE_ITALIA("ITALIA"),
	CODICE_ITALIA("1"),
	
	// MovimentoGestione
	IMPEGNO("Impegno"),
	ACCERTAMENTO("Accertamento"),
	
	// Azioni decentrate
	GESTISCI_DOCUMENTO_SPESA_DECENTRATO("OP-SPE-gestisciDocDecentrato"),
	GESTISCI_DOCUMENTO_ENTRATA_DECENTRATO("OP-ENT-gestisciDocDecentrato"),
	
	INSERISCI_PREDOCUMENTO_SPESA_DECENTRATO("OP-SPE-insPreDocDec"),
	INSERISCI_PREDOCUMENTO_ENTRATA_DECENTRATO("OP-ENT-insPreDocDec"),
	AGGIORNA_PREDOCUMENTO_SPESA_DECENTRATO("OP-SPE-aggPreDocDec"),
	AGGIORNA_PREDOCUMENTO_ENTRATA_DECENTRATO("OP-ENT-aggPreDocDec"),
	RICERCA_PREDOCUMENTO_SPESA_DECENTRATO("OP-SPE-ricPreDocDec"),
	RICERCA_PREDOCUMENTO_ENTRATA_DECENTRATO("OP-ENT-ricPreDocDec"),
	
	GESTIONE_CAUSALI_PREDOCUMENTO_SPESA_DECENTRATO("OP-SPE-gestisciCausaliPreDocDec"),
	GESTIONE_CAUSALI_PREDOCUMENTO_ENTRATA_DECENTRATO("OP-ENT-gestisciCausaliPreDocDec"),
	
	// Intrastat
	TIPO_REGISTRAZIONE_IVA_INTRASTAT_CODICE("02"),
	TIPO_REGISTRAZIONE_IVA_INTRASTAT_DESCRIZIONE("INTRASTAT"),
	
	// TipoDocumento
	TIPO_DOCUMENTO_ALLEGATO_ATTO("ALG"),
	
	// ModalitaPagamentoSoggetto
	ASSOCIATO_A_SOGGETTO("Soggetto"),
	
	// Soggetto
	AMBITO_CEC("AMBITO_CEC"),
	AMBITO_FIN("AMBITO_FIN"),
	
	// Giustificativi
	VALUTA_CODICE_EURO("EUR"),
	
	// Tipo Richiesta Economale
	CODICE_TIPO_RICHIESTA_ECONOMALE_ANTICIPO_SPESE("ANTICIPO_SPESE"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_ANTICIPO_SPESE_PER_MISSIONE("ANTICIPO_SPESE_MISSIONE"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_ANTICIPO_PER_TRASFERTA_DIPENDENTI("ANTICIPO_TRASFERTA_DIPENDENTI"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_PAGAMENTO_FATTURE("PAGAMENTO_FATTURE"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_RIMBORSO_SPESE("RIMBORSO_SPESE"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_PAGAMENTO("PAGAMENTO"),
	
	CODICE_TIPO_RICHIESTA_ECONOMALE_ANTICIPO_SPESE_RENDICONTO("ANTICIPO_SPESE_RENDICONTO"),
	CODICE_TIPO_RICHIESTA_ECONOMALE_ANTICIPO_SPESE_PER_MISSIONE_RENDICONTO("ANTICIPO_SPESE_MISSIONE_RENDICONTO"),
	
	
	//Tipo Giustificativo per richiesta economale
	CODICE_TIPO_GIUSTIFICATIVO_FATTURA("FAT"),
	
	// Modalita di pagamento del dipendente
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_ASSEGNO_BANCARIO("ASB"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_ASSEGNO_CIRCOLARE("ASC"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_CONTO_CORRENTE_BANCARIO("CCB"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_CONTO_CORRENTE_BANCARIO_CB("CB"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_CONTO_CORRENTE_POSTALE("CCP"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_CONTANTI("CON"),
	CODICE_MODALITA_PAGAMENTO_DIPENDENTE_ACCREDITO_POSTALE("ACP"),
	
	// Tipo Evento
	TIPO_EVENTO_SCRITTURA_EPILOGATIVA("EP"),
	TIPO_EVENTO_CONTI_D_ORDINE("CO"),
	DESCRIZIONE_TIPO_EVENTO_IMPEGNO("Impegno"),
	DESCRIZIONE_TIPO_EVENTO_ACCERTAMENTO("Accertamento"),
	DESCRIZIONE_TIPO_EVENTO_DOCUMENTO_ENTRATA("Documento Entrata"),
	DESCRIZIONE_TIPO_EVENTO_DOCUMENTO_SPESA("Documento Spesa"),
	DESCRIZIONE_TIPO_EVENTO_ORDINATIVO_PAGAMENTO("Ordinativo Pagamento"),
	DESCRIZIONE_TIPO_EVENTO_ORDINATIVO_INCASSO("Ordinativo Incasso"),
	DESCRIZIONE_TIPO_EVENTO_LIQUIDAZIONE("Liquidazione"),
	// SIAC-5334
	TIPO_EVENTO_EXTR("EXTR"),
	CODICE_EVENTO_EXTR("EXTR"),
	CODICE_CAUSALE_EP_EXTR("EXTR"),
	// Evento
	CODICE_EVENTO_IMP_PRG("IMP-PRG"),
	
	// Classe conto
	CLASSE_CONTO_COSTI_DI_ESERCIZIO("CE"),
	CLASSE_CONTO_ATTIVO_PATRIMONIALE("AP"),
	CLASSE_CONTO_PASSIVO_PATRIMONIALE("PP"),
	CLASSE_CONTO_RICAVI_DI_ESERCIZIO("RE"),
	CLASSE_CONTO_CONTI_D_ORDINE_PASSIVITA("OP"),
	CLASSE_CONTO_CONTI_D_ORDINE_ATTIVITA("OA"),
	CLASSE_CONTO_EPILOGATIVA("EP"),
	
	//Tipo conto
	
	CODICE_CONTO_CESPITI("CES"),
	CODICE_CONTO_GENERICO("GE"),
	
	// Fattura elettronica
	CODICE_DIVISA_EUR("EUR"),
	TIPO_DOCUMENTO_FEL_TD01("TD01"),
	TIPO_DOCUMENTO_FEL_TD02("TD02"),
	TIPO_DOCUMENTO_FEL_TD03("TD03"),
	TIPO_DOCUMENTO_FEL_TD04("TD04"),
	TIPO_DOCUMENTO_FEL_TD05("TD05"),
	TIPO_DOCUMENTO_FEL_TD06("TD06"),
	TIPO_DOCUMENTO_FAT("FAT"),
	TIPO_DOCUMENTO_FPR("FPR"),
	TIPO_DOCUMENTO_INC("INC"),
	
	ESIGIBILITA_IVA_I("I"),
	ESIGIBILITA_IVA_D("D"),
	
	// Piattaforma Certificazione Crediti
	TIPO_OPERAZIONE_PCC_CONTABILIZZAZIONE(TipoOperazionePCC.Value.Contabilizzazione.getTipoOperazioneTipo().value()),
	TIPO_OPERAZIONE_PCC_COMUNICAZIONE_DATA_SCADENZA(TipoOperazionePCC.Value.ComunicazioneDataScadenza.getTipoOperazioneTipo().value()),
	TIPO_OPERAZIONE_PCC_COMUNICAZIONE_PAGAMENTO(TipoOperazionePCC.Value.ComunicazionePagamento.getTipoOperazioneTipo().value()),
	TIPO_OPERAZIONE_PCC_CANCELLAZIONE_COMUNICAZIONI_SCADENZA(TipoOperazionePCC.Value.CancellazioneComunicazioniScadenza.getTipoOperazioneTipo().value()),
	
	// Split / Reverse
	CODICE_NATURA_ONERE_ESENZIONE("ES"),
	CODICE_NATURA_ONERE_SPLIT_REVERSE("SP"),
	
	//TERMINE DI PAGAMENTO IN GIORNI
	TERMINE_PAGAMENTO("30"),
	
	// SIAC-4165
	CODICE_TIPO_EVENTO_DOCUMENTO_ENTRATA("DE"),
	CODICE_TIPO_EVENTO_DOCUMENTO_SPESA("DS"),
	CODICE_TIPO_EVENTO_ORDINATIVO_INCASSO("OI"),
	CODICE_TIPO_EVENTO_ORDINATIVO_PAGAMENTO("OP"),
	
	// SIAC-4427
	CODICE_PROGETTO_AUTOMATICO("CODICE_PROGETTO_AUTOMATICO"),
	
	// SIAC-4970
	GESTIONE_CONSULTAZIONE_CAP_PRENOTAZIONI("GESTIONE_CONSULTAZIONE_CAP_PRENOTAZIONI"),
	
	// SIAC-5311 SIOPE+
	CODICE_SIOPE_DOCUMENTO_TIPO_ELETTRONICO("E"),
	CODICE_SIOPE_DOCUMENTO_TIPO_ANALOGICO("A"),
	CODICE_SIOPE_DEBITO_TIPO_COMMERCIALE("CO"),
	CODICE_SIOPE_ASSENZA_MOTIVAZIONE_DA_DEFINIRE_IN_LIQUIDAZIONE("CL"),
	CODICE_SIOPE_ASSENZA_MOTIVAZIONE_IN_CORSO_DEFINIZIONE("ID"),
	//CESPITI
	CODICE_EVENTO_INVENTARIO_CONTABILITA("INV-COGE"),
	CODICE_TIPO_EVENTO_CONTABILITA_GENERALE_INVENTARIO("COGE-INV"),
	CODICE_TIPO_EVENTO_GIROCONTI("GI"),
	CODICE_TIPO_EVENTO_LIQUIDAZIONE("L"),
	
	;
	
	private String constant;
	
	/**
	 * Costruttore a partire dalla stringa di descrizione.
	 * 
	 * @param constant la costante rappresentata
	 */
	private BilConstants(String constant) {
		TipoOperazionePCC.Value.Contabilizzazione.getTipoOperazioneTipo().value();
		this.constant = constant;
	}

	/**
	 * @return the constant
	 */
	public String getConstant() {
		return constant;
	}
	
	/**
	 * Metodo di utilit&agrave; per gli id.
	 * 
	 * @return l'id
	 * 
	 * @throws UnsupportedOperationException nel caso in cui l'enum non sia un id
	 */
	public Integer getId(){
		Integer result = null;
		try {
			result = Integer.valueOf(this.getConstant());
		} catch(NumberFormatException e) {
			throw new UnsupportedOperationException("Impossibile ottenere l'id", e);
		}
		return result;
	}
	
}
